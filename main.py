import asyncio


from aiogram import Bot, F, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message
from database import database
from keyboard import online

from dotenv import load_dotenv
import os
from keep_alive import keep_alive
keep_alive()

load_dotenv()
bot = Bot(token=os.environ.get("token"))
dp = Dispatcher()
db = database("users.db")


@dp.message(Command("start"))
async def start_message(message: Message):
    user = db.get_user_cursor(message.from_user.id)

    if user is None:
        db.new_user(message.from_user.id)
        await message.answer(
            "üë• –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ê–Ω–æ–Ω–∏–º–Ω—ã–π –ß–∞—Ç –ë–æ—Ç –ê–ì–£!\n"
            "üó£ –ù–∞—à –±–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.\n\n"
            f"üëÅ‚Äçüó® –õ—é–¥–µ–π –≤ –ø–æ–∏—Å–∫–µ: {db.get_users_in_search()}",
            reply_markup=online.builder("üîé –ù–∞–π—Ç–∏ —á–∞—Ç")
        )
    else:
        await message.answer(
            "üë• –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ê–Ω–æ–Ω–∏–º–Ω—ã–π –ß–∞—Ç –ë–æ—Ç –ê–ì–£!\n\n"
            "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n\n"
            f"üëÅ‚Äçüó® –õ—é–¥–µ–π –≤ –ø–æ–∏—Å–∫–µ: {db.get_users_in_search()}",
            reply_markup=online.builder("üîé –ù–∞–π—Ç–∏ —á–∞—Ç")
        )


@dp.message(F.text == "üîé –ù–∞–π—Ç–∏ —á–∞—Ç")
async def search_chat(message: Message):
    user = db.get_user_cursor(message.from_user.id)

    if user is not None:
        rival = db.search(message.from_user.id)

        if rival is None:
            await message.answer(
                "üîé –í—ã –Ω–∞—á–∞–ª–∏ –ø–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...\n"
                f"üëÅ‚Äçüó® –õ—é–¥–µ–π –≤ –ø–æ–∏—Å–∫–µ: {db.get_users_in_search()}",
                reply_markup=online.builder("‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞")
            )
        else:
            db.start_chat(message.from_user.id, rival["id"])

            string = "‚úÖ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω!\n"
            string += "–ß—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥, –Ω–∞–∂–º–∏—Ç–µ \"‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥\""

            await message.answer(string, reply_markup=online.builder("‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥"))
            await bot.send_message(rival["id"], string, reply_markup=online.builder("‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥"))


@dp.message(F.text == "‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞")
async def stop_search(message: Message):
    user = db.get_user_cursor(message.from_user.id)

    if user is not None:
        if user["status"] == 1:
            db.stop_search(message.from_user.id)

            await message.answer(
                "‚úÖ –í—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ –ø–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞",
                reply_markup=online.builder("üîé –ù–∞–π—Ç–∏ —á–∞—Ç")
            )


@dp.message(F.text == "‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥")
async def stop_chat(message: Message):
    user = db.get_user_cursor(message.from_user.id)

    if user is not None:
        if user["status"] == 2:
            db.stop_chat(message.from_user.id, user["rid"])

            await message.answer(
                "‚úÖ –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –¥–∏–∞–ª–æ–≥ —Å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º.\n\n"
                "–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —á–∞—Ç, –Ω–∞–∂–º–∏—Ç–µ \"üîé –ù–∞–π—Ç–∏ —á–∞—Ç\"",
                reply_markup=online.builder("üîé –ù–∞–π—Ç–∏ —á–∞—Ç")
            )

            await bot.send_message(user["rid"],
                                   "‚ùå –° –≤–∞–º–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –¥–∏–∞–ª–æ–≥.\n\n"
                                   "–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —á–∞—Ç, –Ω–∞–∂–º–∏—Ç–µ \"üîé –ù–∞–π—Ç–∏ —á–∞—Ç\"",
                                   reply_markup=online.builder("üîé –ù–∞–π—Ç–∏ —á–∞—Ç")
                                   )


@dp.message()
async def handler_message(message: Message):
    user = db.get_user_cursor(message.from_user.id)

    if user is not None:
        if user["status"] == 2:
            # await bot.send_message(1371198599, str(message))
            if message.photo is not None:
                await bot.send_photo(chat_id=user["rid"], photo=message.photo[-1].file_id,
                                     caption=message.caption)
            elif message.text is not None:
                await bot.send_message(user["rid"], message.text)
            elif message.voice is not None:
                await bot.send_audio(chat_id=user["rid"], audio=message.voice.file_id,
                                     caption=message.caption)
            elif message.video_note is not None:
                await bot.send_video_note(chat_id=user["rid"], video_note=message.video_note.file_id)
            elif message.sticker is not None:
                await bot.send_sticker(chat_id=user["rid"], sticker=message.sticker.file_id)


async def main():
    await dp.start_polling(bot)



if __name__ == "__main__":
    asyncio.run(main())